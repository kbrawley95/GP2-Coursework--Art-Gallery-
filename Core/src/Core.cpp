#include "Core.h"

Core::Core(int width, int height)
{
	Core::width = width;
	Core::height = height;
	
	//Change working directory
#ifdef _WIN32
	char buffer[MAX_PATH];
	GetModuleFileName(NULL, buffer, MAX_PATH);
	//move into a string(just makes it easier
	string exeFullFilename(buffer);
	cout << "Exe Path & Filename " << exeFullFilename << endl;
	//now stripout the exe
	string exeDirectory = exeFullFilename.substr(0, exeFullFilename.find_last_of("\\"));
	cout << "Exe Directory " << exeDirectory << endl;
	SetCurrentDirectory(exeDirectory.c_str());
#endif

	// init everyting - SDL, if it is nonzero we have a problem
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
	{
		std::cout << "ERROR SDL_Init " << SDL_GetError() << std::endl;
		return;
	}
	//
	int	imageInitFlags = IMG_INIT_JPG | IMG_INIT_PNG;
	int	returnInitFlags = IMG_Init(imageInitFlags);
	if (((returnInitFlags)&	(imageInitFlags)) != imageInitFlags)	{

		cout << "ERROR	SDL_Image	Init	" << IMG_GetError() << endl;
	}

	if (TTF_Init() == -1)	{
		std::cout << "ERROR	TTF_Init:	" << TTF_GetError();
	}

	//Request opengl 4.1 context, Core Context
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 4);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);

	//Create a window
	window = SDL_CreateWindow(
		"SDL",             // window title
		SDL_WINDOWPOS_CENTERED,     // x position, centered
		SDL_WINDOWPOS_CENTERED,     // y position, centered
		640,                        // width, in pixels
		480,                        // height, in pixels
		SDL_WINDOW_OPENGL           // flags
		);

	// Create an OpenGL context associated with the window.
	glcontext = SDL_GL_CreateContext(window);

	//Call our InitOpenGL Function
	InitOpenGL();
	//Set our viewport
	glViewport(0, 0, (GLsizei)width, (GLsizei)height);
}

Core::~Core()
{
	// clean up, reverse order!!!
	CleanUp();
	SDL_GL_DeleteContext(glcontext);
	SDL_DestroyWindow(window);
	IMG_Quit();
	TTF_Quit();
	SDL_Quit();
}

void Core::StartMainLoop()
{
	//Value to hold the event generated by SDL
	SDL_Event event;
	//Game Loop
	bool run = true; while (run)
	{
		//While we still have events in the queue
		while (SDL_PollEvent(&event))
		{
			//Get event type
			if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE)
			{
				//set our boolean which controls the loop to false
				run = false;
			}

			if (event.type == SDL_MOUSEMOTION)
			{

			}
		}
		//init Scene
		Update();
		//render
		Render();
		//Call swap so that our GL back buffer is displayed
		SDL_GL_SwapWindow(window);
	}
}

void Core::Update()
{

}

void Core::Render()
{
	glBindFramebuffer(GL_FRAMEBUFFER, 0);
	//Set the clear colour(background)
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	//clear the colour and depth buffer
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);


}

void Core::CleanUp()
{
	glDeleteProgram(fullScreenShaderProgram);
	glDeleteBuffers(1, &fullScreenVBO);
	glDeleteVertexArrays(1, &fullScreenVAO);
	glDeleteFramebuffers(1, &frameBufferObject);
	glDeleteRenderbuffers(1, &FBODepthBuffer);
	glDeleteTextures(1, &FBOTexture);
	
}

void Core::InitOpenGL()
{
	glewExperimental = GL_TRUE;
	GLenum err = glewInit();
	if (GLEW_OK != err)
	{
		//Problem: glewInit failed, something is seriously wrong.
		std::cout << "Error: " << glewGetErrorString(err) << std::endl;
	}

	std::cout << GetRendererCapsAsString() << endl;

	//Smooth shading
	glShadeModel(GL_SMOOTH);

	//clear the background to black
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

	//Clear the depth buffer
	glClearDepth(1.0f);

	//Enable depth testing
	glEnable(GL_DEPTH_TEST);

	//The depth test to go
	glDepthFunc(GL_LEQUAL);

	//Turn on best perspective correction
	glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);
}

string Core::GetRendererCapsAsString()
{
	stringstream stringStream;

	stringStream << "OpenGl Version: " << glGetString(GL_VERSION) << "\n";
	stringStream << "Vendor: " << glGetString(GL_VENDOR) << "\n";
	stringStream << "Renderer: " << glGetString(GL_RENDERER) << "\n";
	stringStream << "Shading: " << glGetString(GL_SHADING_LANGUAGE_VERSION) << "\n";
	stringStream << "Extensions Supported\n";
	GLint n = 0;
	glGetIntegerv(GL_NUM_EXTENSIONS, &n);
	for (GLint i = 0; i<n; i++)
	{
		const char* extension =
			(const char*)glGetStringi(GL_EXTENSIONS, i);
		stringStream << extension << ", ";
	}

	return stringStream.str();
}